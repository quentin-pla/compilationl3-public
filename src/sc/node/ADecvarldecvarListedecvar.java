/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ADecvarldecvarListedecvar extends PListedecvar
{
    private PDecvar _decvar_;
    private PListedecvarbis _listedecvarbis_;

    public ADecvarldecvarListedecvar()
    {
        // Constructor
    }

    public ADecvarldecvarListedecvar(
        @SuppressWarnings("hiding") PDecvar _decvar_,
        @SuppressWarnings("hiding") PListedecvarbis _listedecvarbis_)
    {
        // Constructor
        setDecvar(_decvar_);

        setListedecvarbis(_listedecvarbis_);

    }

    @Override
    public Object clone()
    {
        return new ADecvarldecvarListedecvar(
            cloneNode(this._decvar_),
            cloneNode(this._listedecvarbis_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADecvarldecvarListedecvar(this);
    }

    public PDecvar getDecvar()
    {
        return this._decvar_;
    }

    public void setDecvar(PDecvar node)
    {
        if(this._decvar_ != null)
        {
            this._decvar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._decvar_ = node;
    }

    public PListedecvarbis getListedecvarbis()
    {
        return this._listedecvarbis_;
    }

    public void setListedecvarbis(PListedecvarbis node)
    {
        if(this._listedecvarbis_ != null)
        {
            this._listedecvarbis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listedecvarbis_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._decvar_)
            + toString(this._listedecvarbis_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._decvar_ == child)
        {
            this._decvar_ = null;
            return;
        }

        if(this._listedecvarbis_ == child)
        {
            this._listedecvarbis_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._decvar_ == oldChild)
        {
            setDecvar((PDecvar) newChild);
            return;
        }

        if(this._listedecvarbis_ == oldChild)
        {
            setListedecvarbis((PListedecvarbis) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
